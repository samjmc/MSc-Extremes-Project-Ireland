labs(title = paste("Block Maxima Extreme Sea Level Surge at", loc),
x = "Year", y = "Surge (meters)")
}
})
output$extremeTable <- renderTable({
loc <- selected_location()
if (is.null(loc)) return(NULL)
# Filter data for the selected location
data <- sea_level_data %>% filter(location == loc)
# Perform extreme values analysis based on the selected type
if (input$extremeType == "threshold") {
threshold <- quantile(data$surge, 0.95) # Using the 95th percentile as the threshold
extreme_values <- data %>% filter(surge > threshold)
} else if (input$extremeType == "block") {
# Assuming daily data, we will take block maxima for each year
data$date <- as.Date(data$date)
data$year <- format(data$date, "%Y")
extreme_values <- data %>%
group_by(year) %>%
summarise(surge = max(surge))
}
extreme_values
})
# Perform extremes analysis using extRemes and display the results
output$extremesPlot <- renderPlot({
loc <- selected_location()
if (is.null(loc)) return(NULL)
# Filter data for the selected location
data <- sea_level_data %>% filter(location == loc)
# Perform extreme values analysis based on the selected type
if (input$extremeType == "threshold") {
threshold <- quantile(data$surge, 0.95) # Using the 95th percentile as the threshold
extreme_values <- data %>% filter(surge > threshold)
} else if (input$extremeType == "block") {
data$date <- as.Date(data$date)
data$year <- format(data$date, "%Y")
extreme_values <- data %>%
group_by(year) %>%
summarise(surge = max(surge))
}
# Fit a GEV distribution to the extreme values using extRemes
fit <- fevd(extreme_values$surge, type = "GEV")
# Plot the fit
plot(fit)
})
output$extremesOutput <- renderPrint({
loc <- selected_location()
if (is.null(loc)) return(NULL)
# Filter data for the selected location
data <- sea_level_data %>% filter(location == loc)
# Perform extreme values analysis based on the selected type
if (input$extremeType == "threshold") {
threshold <- quantile(data$surge, 0.95) # Using the 95th percentile as the threshold
extreme_values <- data %>% filter(surge > threshold)
} else if (input$extremeType == "block") {
data$date <- as.Date(data$date)
data$year <- format(data$date, "%Y")
extreme_values <- data %>%
group_by(year) %>%
summarise(surge = max(surge))
}
# Fit a GEV distribution to the extreme values using extRemes
fit <- fevd(extreme_values$surge, type = "GEV")
# Print the summary of the fit
#summary(fit)
})
output$returnLevelOutput <- renderPrint({
loc <- selected_location()
if (is.null(loc)) return(NULL)
# Filter data for the selected location
data <- sea_level_data %>% filter(location == loc)
# Perform extreme values analysis based on the selected type
if (input$extremeType == "threshold") {
threshold <- quantile(data$surge, 0.95) # Using the 95th percentile as the threshold
extreme_values <- data %>% filter(surge > threshold)
} else if (input$extremeType == "block") {
data$date <- as.Date(data$date)
data$year <- format(data$date, "%Y")
extreme_values <- data %>%
group_by(year) %>%
summarise(surge = max(surge))
}
# Fit a GEV distribution to the extreme values using extRemes
fit <- fevd(extreme_values$surge, type = "GEV")
# Calculate the return level for the given return period
return_period <- input$returnPeriod
return_level <- return.level(fit, return.period = return_period)
paste("Estimated return level for a", return_period, "year return period is:", round(return_level, 2), "meters")
})
}
# Run the app
shinyApp(ui, server)
# Define UI
ui <- fluidPage(
titlePanel("Sea Level Surge in Ireland"),
sidebarLayout(
sidebarPanel(
leafletOutput("map"),
textOutput("location"),
hr(),
sliderInput("latRange", "Latitude Range:",
min = min(sea_level_data$latitude) - 1,
max = max(sea_level_data$latitude) + 1,
value = range(sea_level_data$latitude),
step = 0.1),
sliderInput("lngRange", "Longitude Range:",
min = min(sea_level_data$longitude) - 1,
max = max(sea_level_data$longitude) + 1,
value = range(sea_level_data$longitude),
step = 0.1)
),
mainPanel(
tabsetPanel(
tabPanel("Plot", plotOutput("plot")),
tabPanel("Extreme Values Analysis",
selectInput("extremeType", "Select Extreme Value Analysis Type:",
choices = c("Above Threshold" = "threshold", "Block Maxima" = "block")),
plotOutput("extremePlot"),
tableOutput("extremeTable")),
tabPanel("Extremes Analysis using extRemes",
numericInput("returnPeriod", "Return Period (years):", value = 100, min = 1),
plotOutput("extremesPlot"),
verbatimTextOutput("extremesOutput"),
verbatimTextOutput("returnLevelOutput"))
)
)
)
)
# Define Server
server <- function(input, output, session) {
# Reactive data filtered by latitude and longitude range
filtered_data <- reactive({
sea_level_data %>%
filter(latitude >= input$latRange[1] & latitude <= input$latRange[2]) %>%
filter(longitude >= input$lngRange[1] & longitude <= input$lngRange[2])
})
# Render the leaflet map
output$map <- renderLeaflet({
leaflet(filtered_data()) %>%
addTiles() %>%
addCircleMarkers(
~longitude, ~latitude,
layerId = ~location, # Use location as the ID for the markers
radius = 5, # Set the radius of the markers to make them smaller
popup = ~location
)
})
# Reactive value to store the selected location
selected_location <- reactiveVal()
# Observe map clicks to update selected location
observeEvent(input$map_marker_click, {
click <- input$map_marker_click
selected_location(click$id)
})
# Display the selected location
output$location <- renderText({
loc <- selected_location()
if (is.null(loc)) {
"Click a location on the map to view data."
} else {
paste("Selected Location:", loc)
}
})
# Render the plot based on the selected location
output$plot <- renderPlot({
loc <- selected_location()
if (is.null(loc)) return(NULL)
# Filter data for the selected location
data <- sea_level_data %>% filter(location == loc)
# Generate the plot
ggplot(data, aes(x = date, y = surge)) +
geom_line() +
geom_point() +
labs(title = paste("Sea Level Surge at", loc),
x = "Date", y = "Surge (meters)")
})
# Render the extreme values analysis plot and table based on the selected location and type
output$extremePlot <- renderPlot({
loc <- selected_location()
if (is.null(loc)) return(NULL)
# Filter data for the selected location
data <- sea_level_data %>% filter(location == loc)
# Perform extreme values analysis based on the selected type
if (input$extremeType == "threshold") {
threshold <- quantile(data$surge, 0.95) # Using the 95th percentile as the threshold
extreme_values <- data %>% filter(surge > threshold)
# Generate the plot
ggplot(extreme_values, aes(x = date, y = surge)) +
geom_line() +
geom_point(color = "red") +
labs(title = paste("Above Threshold Extreme Sea Level Surge at", loc),
x = "Date", y = "Surge (meters)")
} else if (input$extremeType == "block") {
# Assuming daily data, we will take block maxima for each year
data$date <- as.Date(data$date)
data$year <- format(data$date, "%Y")
extreme_values <- data %>%
group_by(year) %>%
summarise(surge = max(surge))
# Generate the plot
ggplot(extreme_values, aes(x = as.Date(paste0(year, "-01-01")), y = surge)) +
geom_line() +
geom_point(color = "blue") +
labs(title = paste("Block Maxima Extreme Sea Level Surge at", loc),
x = "Year", y = "Surge (meters)")
}
})
output$extremeTable <- renderTable({
loc <- selected_location()
if (is.null(loc)) return(NULL)
# Filter data for the selected location
data <- sea_level_data %>% filter(location == loc)
# Perform extreme values analysis based on the selected type
if (input$extremeType == "threshold") {
threshold <- quantile(data$surge, 0.95) # Using the 95th percentile as the threshold
extreme_values <- data %>% filter(surge > threshold)
} else if (input$extremeType == "block") {
# Assuming daily data, we will take block maxima for each year
data$date <- as.Date(data$date)
data$year <- format(data$date, "%Y")
extreme_values <- data %>%
group_by(year) %>%
summarise(surge = max(surge))
}
extreme_values
})
# Perform extremes analysis using extRemes and display the results
output$extremesPlot <- renderPlot({
loc <- selected_location()
if (is.null(loc)) return(NULL)
# Filter data for the selected location
data <- sea_level_data %>% filter(location == loc)
# Perform extreme values analysis based on the selected type
if (input$extremeType == "threshold") {
threshold <- quantile(data$surge, 0.95) # Using the 95th percentile as the threshold
extreme_values <- data %>% filter(surge > threshold)
# Fit a GEV distribution to the extreme values using extRemes
fit <- fevd(extreme_values$surge, type = "GEV", threshold = threshold)
} else if (input$extremeType == "block") {
data$date <- as.Date(data$date)
data$year <- format(data$date, "%Y")
extreme_values <- data %>%
group_by(year) %>%
summarise(surge = max(surge))
# Fit a GEV distribution to the extreme values using extRemes
fit <- fevd(extreme_values$surge, type = "GEV")
}
# Plot the fit
plot(fit)
})
output$extremesOutput <- renderPrint({
loc <- selected_location()
if (is.null(loc)) return(NULL)
# Filter data for the selected location
data <- sea_level_data %>% filter(location == loc)
# Perform extreme values analysis based on the selected type
if (input$extremeType == "threshold") {
threshold <- quantile(data$surge, 0.95) # Using the 95th percentile as the threshold
extreme_values <- data %>% filter(surge > threshold)
# Fit a GEV distribution to the extreme values using extRemes
fit <- fevd(extreme_values$surge, type = "GEV", threshold = threshold)
} else if (input$extremeType == "block") {
data$date <- as.Date(data$date)
data$year <- format(data$date, "%Y")
extreme_values <- data %>%
group_by(year) %>%
summarise(surge = max(surge))
fit <- fevd(extreme_values$surge, type = "GEV")
}
# Print the summary of the fit
#summary(fit)
})
output$returnLevelOutput <- renderPrint({
loc <- selected_location()
if (is.null(loc)) return(NULL)
# Filter data for the selected location
data <- sea_level_data %>% filter(location == loc)
# Perform extreme values analysis based on the selected type
if (input$extremeType == "threshold") {
threshold <- quantile(data$surge, 0.95) # Using the 95th percentile as the threshold
extreme_values <- data %>% filter(surge > threshold)
# Fit a GEV distribution to the extreme values using extRemes
fit <- fevd(extreme_values$surge, type = "GEV", threshold = threshold)
} else if (input$extremeType == "block") {
data$date <- as.Date(data$date)
data$year <- format(data$date, "%Y")
extreme_values <- data %>%
group_by(year) %>%
summarise(surge = max(surge))
# Fit a GEV distribution to the extreme values using extRemes
fit <- fevd(extreme_values$surge, type = "GEV")
}
# Fit a GEV distribution to the extreme values using extRemes
fit <- fevd(extreme_values$surge, type = "GEV")
# Calculate the return level for the given return period
return_period <- input$returnPeriod
return_level <- return.level(fit, return.period = return_period)
paste("The estimated return level for a", return_period, "year return period is:", round(return_level, 2), "meters")
})
}
# Run the app
shinyApp(ui, server)
# Define UI
ui <- fluidPage(
titlePanel("Sea Level Surge in Ireland"),
sidebarLayout(
sidebarPanel(
leafletOutput("map"),
textOutput("location"),
hr(),
sliderInput("latRange", "Latitude Range:",
min = min(sea_level_data$latitude) - 1,
max = max(sea_level_data$latitude) + 1,
value = range(sea_level_data$latitude),
step = 0.1),
sliderInput("lngRange", "Longitude Range:",
min = min(sea_level_data$longitude) - 1,
max = max(sea_level_data$longitude) + 1,
value = range(sea_level_data$longitude),
step = 0.1)
),
mainPanel(
tabsetPanel(
tabPanel("Plot", plotOutput("plot")),
tabPanel("Extreme Values Analysis",
selectInput("extremeType", "Select Extreme Value Analysis Type:",
choices = c("Above Threshold" = "threshold", "Block Maxima" = "block")),
plotOutput("extremePlot"),
tableOutput("extremeTable")),
tabPanel("Extremes Analysis using extRemes",
numericInput("returnPeriod", "Return Period (years):", value = 100, min = 1),
plotOutput("extremesPlot"),
verbatimTextOutput("extremesOutput"),
verbatimTextOutput("returnLevelOutput"))
)
)
)
)
# Define Server
server <- function(input, output, session) {
# Reactive data filtered by latitude and longitude range
filtered_data <- reactive({
sea_level_data %>%
filter(latitude >= input$latRange[1] & latitude <= input$latRange[2]) %>%
filter(longitude >= input$lngRange[1] & longitude <= input$lngRange[2])
})
# Render the leaflet map
output$map <- renderLeaflet({
leaflet(filtered_data()) %>%
addTiles() %>%
addCircleMarkers(
~longitude, ~latitude,
layerId = ~location, # Use location as the ID for the markers
radius = 5, # Set the radius of the markers to make them smaller
popup = ~location
)
})
# Reactive value to store the selected location
selected_location <- reactiveVal()
# Observe map clicks to update selected location
observeEvent(input$map_marker_click, {
click <- input$map_marker_click
selected_location(click$id)
})
# Display the selected location
output$location <- renderText({
loc <- selected_location()
if (is.null(loc)) {
"Click a location on the map to view data."
} else {
paste("Selected Location:", loc)
}
})
# Render the plot based on the selected location
output$plot <- renderPlot({
loc <- selected_location()
if (is.null(loc)) return(NULL)
# Filter data for the selected location
data <- sea_level_data %>% filter(location == loc)
# Generate the plot
ggplot(data, aes(x = date, y = surge)) +
geom_line() +
geom_point() +
labs(title = paste("Sea Level Surge at", loc),
x = "Date", y = "Surge (meters)")
})
# Render the extreme values analysis plot and table based on the selected location and type
output$extremePlot <- renderPlot({
loc <- selected_location()
if (is.null(loc)) return(NULL)
# Filter data for the selected location
data <- sea_level_data %>% filter(location == loc)
# Perform extreme values analysis based on the selected type
if (input$extremeType == "threshold") {
threshold <- quantile(data$surge, 0.99) # Using the 95th percentile as the threshold
extreme_values <- data %>% filter(surge > threshold)
# Generate the plot
ggplot(extreme_values, aes(x = date, y = surge)) +
geom_line() +
geom_point(color = "red") +
labs(title = paste("Above Threshold Extreme Sea Level Surge at", loc),
x = "Date", y = "Surge (meters)")
} else if (input$extremeType == "block") {
# Assuming daily data, we will take block maxima for each year
data$date <- as.Date(data$date)
data$year <- format(data$date, "%Y")
extreme_values <- data %>%
group_by(year) %>%
summarise(surge = max(surge))
# Generate the plot
ggplot(extreme_values, aes(x = as.Date(paste0(year, "-01-01")), y = surge)) +
geom_line() +
geom_point(color = "blue") +
labs(title = paste("Block Maxima Extreme Sea Level Surge at", loc),
x = "Year", y = "Surge (meters)")
}
})
output$extremeTable <- renderTable({
loc <- selected_location()
if (is.null(loc)) return(NULL)
# Filter data for the selected location
data <- sea_level_data %>% filter(location == loc)
# Perform extreme values analysis based on the selected type
if (input$extremeType == "threshold") {
threshold <- quantile(data$surge, 0.99) # Using the 95th percentile as the threshold
extreme_values <- data %>% filter(surge > threshold)
} else if (input$extremeType == "block") {
# Assuming daily data, we will take block maxima for each year
data$date <- as.Date(data$date)
data$year <- format(data$date, "%Y")
extreme_values <- data %>%
group_by(year) %>%
summarise(surge = max(surge))
}
extreme_values
})
# Perform extremes analysis using extRemes and display the results
output$extremesPlot <- renderPlot({
loc <- selected_location()
if (is.null(loc)) return(NULL)
# Filter data for the selected location
data <- sea_level_data %>% filter(location == loc)
# Perform extreme values analysis based on the selected type
if (input$extremeType == "threshold") {
threshold <- quantile(data$surge, 0.99) # Using the 95th percentile as the threshold
extreme_values <- data %>% filter(surge > threshold)
# Fit a GEV distribution to the extreme values using extRemes
fit <- fevd(extreme_values$surge, type = "GEV", threshold = threshold)
} else if (input$extremeType == "block") {
data$date <- as.Date(data$date)
data$year <- format(data$date, "%Y")
extreme_values <- data %>%
group_by(year) %>%
summarise(surge = max(surge))
# Fit a GEV distribution to the extreme values using extRemes
fit <- fevd(extreme_values$surge, type = "GEV")
}
# Plot the fit
plot(fit)
})
output$extremesOutput <- renderPrint({
loc <- selected_location()
if (is.null(loc)) return(NULL)
# Filter data for the selected location
data <- sea_level_data %>% filter(location == loc)
# Perform extreme values analysis based on the selected type
if (input$extremeType == "threshold") {
threshold <- quantile(data$surge, 0.99) # Using the 95th percentile as the threshold
extreme_values <- data %>% filter(surge > threshold)
# Fit a GEV distribution to the extreme values using extRemes
fit <- fevd(extreme_values$surge, type = "GEV", threshold = threshold)
} else if (input$extremeType == "block") {
data$date <- as.Date(data$date)
data$year <- format(data$date, "%Y")
extreme_values <- data %>%
group_by(year) %>%
summarise(surge = max(surge))
fit <- fevd(extreme_values$surge, type = "GEV")
}
# Print the summary of the fit
#summary(fit)
})
output$returnLevelOutput <- renderPrint({
loc <- selected_location()
if (is.null(loc)) return(NULL)
# Filter data for the selected location
data <- sea_level_data %>% filter(location == loc)
# Perform extreme values analysis based on the selected type
if (input$extremeType == "threshold") {
threshold <- quantile(data$surge, 0.99) # Using the 95th percentile as the threshold
extreme_values <- data %>% filter(surge > threshold)
# Fit a GEV distribution to the extreme values using extRemes
fit <- fevd(extreme_values$surge, type = "GEV", threshold = threshold)
} else if (input$extremeType == "block") {
data$date <- as.Date(data$date)
data$year <- format(data$date, "%Y")
extreme_values <- data %>%
group_by(year) %>%
summarise(surge = max(surge))
# Fit a GEV distribution to the extreme values using extRemes
fit <- fevd(extreme_values$surge, type = "GEV")
}
# Fit a GEV distribution to the extreme values using extRemes
fit <- fevd(extreme_values$surge, type = "GEV")
# Calculate the return level for the given return period
return_period <- input$returnPeriod
return_level <- return.level(fit, return.period = return_period)
paste("The estimated return level for a", return_period, "year return period is:", round(return_level, 2), "meters")
})
}
# Run the app
shinyApp(ui, server)
