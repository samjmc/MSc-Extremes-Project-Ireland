return_5yr = return_levels_block[1],
return_20yr = return_levels_block[2],
return_100yr = return_levels_block[3]))
return_levels_all_block
return_levels_all_block
# Create an empty dataframe to store return level estimates for all stations
return_levels_all_block <- data.frame(station_name = character(),
return_5yr = numeric(),
return_20yr = numeric(),
return_100yr = numeric(),
stringsAsFactors = FALSE)
return_levels_all_block
return_levels_all_block
# Add return levels to the dataframe
return_levels_all_block <- rbind(return_levels_all_block,
data.frame(station_name = station_name,
return_5yr = return_levels_block[1],
return_20yr = return_levels_block[2],
return_100yr = return_levels_block[3]))
return_levels_all_block
return_levels_all_block
# Remove the first row (initialized with empty strings)
return_levels_all_block <- return_levels_all_block[-1, ]
# Print the dataframe
print(return_levels_all_block)
return_levels_all_block[-1, ]
# Subset data for the current station
station_data_block <- data %>% filter(station_name == levels(data$station_name)[i]) %>% group_by(year) %>% summarise(surge_annual_max = max(surge_daily_max)) ### UPDATE NC, APR 16
# Estimate return levels for the current station
return_levels_block <- estimate_return_levels_block(station_data_block)
# Add return levels to the dataframe
return_levels_all_block <- rbind(return_levels_all_block,
data.frame(station_name = station_name,
return_5yr = return_levels_block[1],
return_20yr = return_levels_block[2],
return_100yr = return_levels_block[3]))
return_levels_all_block[-1, ]
return_levels_all_block
# Print the dataframe
print(return_levels_all_block)
# Define function to estimate return levels for a given station
estimate_return_levels_block<- function(station_data_block) {
# Fit GEV distribution to block maxima
gev_block_fit <- fevd(station_data_block$surge_annual_max, method = "MLE") ### UPDATE NC, APR 16
# Estimate return levels
return_levels_block <- return.level(gev_block_fit, return.period = c(5,20, 100), do.ci = TRUE)
# Return the return levels
return(return_levels_block)
}
# Create an empty dataframe to store return level estimates for all stations
return_levels_all_block <- data.frame(station_name = character(),
return_5yr = numeric(),
return_20yr = numeric(),
return_100yr = numeric(),
stringsAsFactors = FALSE)
# Loop through each station in the subset (i = 16 for DunL)
for (1:nlevels(data$station_name)) {
# Define function to estimate return levels for a given station
estimate_return_levels_block<- function(station_data_block) {
# Fit GEV distribution to block maxima
gev_block_fit <- fevd(station_data_block$surge_annual_max, method = "MLE") ### UPDATE NC, APR 16
# Estimate return levels
return_levels_block <- return.level(gev_block_fit, return.period = c(5,20, 100), do.ci = TRUE)
# Return the return levels
return(return_levels_block)
}
# Create an empty dataframe to store return level estimates for all stations
return_levels_all_block <- data.frame(station_name = character(),
return_5yr = numeric(),
return_20yr = numeric(),
return_100yr = numeric(),
stringsAsFactors = FALSE)
# Loop through each station in the subset (i = 16 for DunL)
for (i in 1:nlevels(data$station_name)) {
# Subset data for the current station
station_data_block <- data %>% filter(station_name == levels(data$station_name)[i]) %>% group_by(year) %>% summarise(surge_annual_max = max(surge_daily_max)) ### UPDATE NC, APR 16
# Estimate return levels for the current station
return_levels_block <- estimate_return_levels_block(station_data_block)
# Add return levels to the dataframe
return_levels_all_block <- rbind(return_levels_all_block,
data.frame(station_name = station_name,
return_5yr = return_levels_block[1],
return_20yr = return_levels_block[2],
return_100yr = return_levels_block[3]))
}
# Print the dataframe
print(return_levels_all_block)
print(return_levels_all_block)
# Loop through each station in the subset (i = 16 for DunL)
for (i in 1:nlevels(data$station_name)) {
# Subset data for the current station
station_data_block <- data %>% filter(station_name == levels(data$station_name)[i]) %>% group_by(year) %>% summarise(surge_annual_max = max(surge_daily_max)) ### UPDATE NC, APR 16
# Estimate return levels for the current station
return_levels_block <- estimate_return_levels_block(station_data_block)
# Add return levels to the dataframe
return_levels_all_block <- rbind(return_levels_all_block,
data.frame(station_name = levels(data$station_name)[i],
return_5yr = return_levels_block[1],
return_20yr = return_levels_block[2],
return_100yr = return_levels_block[3]))
}
# Print the dataframe
print(return_levels_all_block)
i <- 16
data %>% filter(station_name == levels(data$station_name)[i])
data %>% filter(station_name == levels(data$station_name)[i])
# Subset data for the current station
station_data_block <- data %>% filter(station_name == levels(data$station_name)[i]) %>% group_by(station_name, year) %>% summarise(surge_annual_max = max(surge_daily_max)) ### UPDATE NC, APR 16
station_data_block
station_data_block
# Subset data for the current station
station_data_block <- data %>% filter(station_name == levels(data$station_name)[i]) %>% group_by(station_name, year) %>% summarise(surge_annual_max = max(surge_daily_max)) %>% ungroup() ### UPDATE NC, APR 16
station_data_block
station_data_block
# Subset data for the current station
station_data_block <- data %>% filter(station_name == levels(data$station_name)[i]) %>% group_by(station_name, year) %>% summarise(surge_annual_max = max(surge_daily_max)) %>% ungroup() ### UPDATE NC, APR 16
# Estimate return levels for the current station
return_levels_block <- estimate_return_levels_block(station_data_block)
# Add return levels to the dataframe
return_levels_all_block <- rbind(return_levels_all_block,
data.frame(station_name = station_data_block$station_name %>% unique(),
return_5yr = return_levels_block[1],
return_20yr = return_levels_block[2],
return_100yr = return_levels_block[3]))
return_levels_all_block
return_levels_all_block
# Create an empty dataframe to store return level estimates for all stations
return_levels_all_block <- data.frame(station_name = character(),
return_5yr = numeric(),
return_20yr = numeric(),
return_100yr = numeric(),
stringsAsFactors = FALSE)
# Loop through each station in the subset (i = 16 for DunL)
for (i in 1:nlevels(data$station_name)) {
# Subset data for the current station
station_data_block <- data %>% filter(station_name == levels(data$station_name)[i]) %>% group_by(station_name, year) %>% summarise(surge_annual_max = max(surge_daily_max)) %>% ungroup() ### UPDATE NC, APR 16
# Estimate return levels for the current station
return_levels_block <- estimate_return_levels_block(station_data_block)
# Add return levels to the dataframe
return_levels_all_block <- rbind(return_levels_all_block,
data.frame(station_name = station_data_block$station_name %>% unique(),
return_5yr = return_levels_block[1],
return_20yr = return_levels_block[2],
return_100yr = return_levels_block[3]))
}
# Print the dataframe
print(return_levels_all_block)
data_unique <- distinct(data, station_name, lon, lat)
data_unique
data_unique
return_levels_all_block
return_levels_all_block
return_levels_with_coords_block <- merge(return_levels_all_block, data_unique[, c("station_name", "lon", "lat")], by = "station_name")
return_levels_with_coords_block
return_levels_with_coords_block
return_levels_with_coords_block <- inner_join(return_levels_all_block, data_unique[, c("station_name", "lon", "lat")], by = "station_name")
return_levels_with_coords_block
return_levels_with_coords_block
data_unique
data_unique
data_unique <- distinct(data, station_name, lon, lat)
data_unique
data_unique
## switched to use inner join to join the datasets
return_levels_with_coords_block <- inner_join(return_levels_all_block, data_unique, by = "station_name")
return_levels_with_coords_block
return_levels_with_coords_block
# Convert return_levels_all_with_coords to sf object
return_levels_sf_block <- st_as_sf(return_levels_with_coords_block, coords = c("lon", "lat"), crs = 4326)
# Plot map of Ireland with return levels represented by colors
tm_shape(ireland) +
tm_borders() +
tm_shape(return_levels_sf_block) +
tm_dots(col = "return_100yr", size = 1, alpha = 0.5, title = "Return Level (100yr) Using Block Maxima") +
tm_style("gray")
# Plot map of Ireland with return levels represented by colors
tm_shape(ireland) +
tm_borders() +
tm_shape(return_levels_sf_block) +
tm_dots(col = "return_100yr", size = 1, alpha = 0.5, title = "Return Level (100yr) Using Block Maxima") +
tm_style("gray")
# Plot map of Ireland with return levels represented by colors
tm_shape(ireland) +
tm_borders() +
tm_shape(return_levels_sf_block) +
tm_dots(col = "return_5yr", size = 1, alpha = 0.5, title = "Return Level (100yr) Using Block Maxima") +
tm_style("gray")
# Plot map of Ireland with return levels represented by colors
tm_shape(ireland) +
tm_borders() +
tm_shape(return_levels_sf_block) +
tm_dots(col = "return_5yr", size = 1, alpha = 0.5, title = "Return Level (5yr) Using Block Maxima") +
tm_style("gray")
# Plot map of Ireland with return levels represented by colors
tm_shape(ireland) +
tm_borders() +
tm_shape(return_levels_sf_block) +
tm_dots(col = "return_20yr", size = 1, alpha = 0.5, title = "Return Level (20yr) Using Block Maxima") +
tm_style("gray")
# Plot map of Ireland with return levels represented by colors
tm_shape(ireland) +
tm_borders() +
tm_shape(return_levels_sf_block) +
tm_dots(col = "return_5yr", size = 1, alpha = 0.5, title = "Return Level (5yr) Using Block Maxima") +
tm_style("gray")
# Create an empty dataframe to store results
exceedance_counts <- data.frame(station_name = character(), exceedances_5yr = numeric(), stringsAsFactors = FALSE)
i <- 16
# Filter the original data for the current station
station_data <- data %>% filter(station_name == levels(data$station_name)[i])
station_data
station_data
# Extract the 5-year return level for the current station
return_5yr <- return_levels_all %>% filter(station_name == levels(data$station_name)[i])
return_levels_with_coords_block %>% filter(station_name == levels(data$station_name)[i])
return_levels_with_coords_block %>% filter(station_name == levels(data$station_name)[i])
# Extract the 5-year return level for the current station
return_5yr <- return_levels_with_coords_block %>% filter(station_name == levels(data$station_name)[i]) %>% pull(return_5yr)
return_5yr
# Count the number of exceedances for the current station
exceedances <- sum(station_data$surge_daily_max > return_5yr)
exceedances
# Create an empty dataframe to store results
exceedance_counts <- data.frame(station_name = character(), exceedances_5yr = numeric(), stringsAsFactors = FALSE)
# Loop through each station name
for (i in 1:nlevels(data$station_name)) {
# Filter the original data for the current station
station_data <- data %>% filter(station_name == levels(data$station_name)[i])
# Extract the 5-year return level for the current station
return_5yr <- return_levels_with_coords_block %>% filter(station_name == levels(data$station_name)[i]) %>% pull(return_5yr)
# Count the number of exceedances for the current station
exceedances <- sum(station_data$surge_daily_max > return_5yr)
# Add station name and exceedance count to the dataframe
exceedance_counts <- rbind(exceedance_counts, data.frame(station_name = station_name, exceedances_5yr = exceedances))
}
# Print the dataframe
print(exceedance_counts)
station_data
station_data
# Create an empty dataframe to store results
exceedance_counts <- data.frame(station_name = character(), exceedances_5yr = numeric(), stringsAsFactors = FALSE)
# Loop through each station name
for (i in 1:nlevels(data$station_name)) {
# Filter the original data for the current station
station_data <- data %>% filter(station_name == levels(data$station_name)[i])
# Extract the 5-year return level for the current station
return_5yr <- return_levels_with_coords_block %>% filter(station_name == levels(data$station_name)[i]) %>% pull(return_5yr)
# Count the number of exceedances for the current station
exceedances <- sum(station_data$surge_daily_max > return_5yr)
# Add station name and exceedance count to the dataframe
exceedance_counts <- rbind(exceedance_counts, data.frame(station_name = station_data$station_name %>% unique, exceedances_5yr = exceedances))
}
# Print the dataframe
print(exceedance_counts)
# Loop through each station name
for (i in 1:nlevels(data$station_name)) {
# Filter the original data for the current station
station_data <- data %>% filter(station_name == levels(data$station_name)[i])
# Extract the 5-year return level for the current station
return_5yr <- return_levels_with_coords_block %>% filter(station_name == levels(data$station_name)[i]) %>% pull(return_5yr)
# Count the number of exceedances for the current station
exceedances <- sum(station_data$surge_daily_max > return_5yr)
# Add station name and exceedance count to the dataframe
exceedance_counts <- rbind(exceedance_counts,
data.frame(station_name = station_data$station_name %>% unique,
exceedances_5yr = exceedances,
exceedance_level_5yr = return_5yr))
}
# Create an empty dataframe to store results
exceedance_counts <- data.frame(station_name = character(), exceedances_5yr = numeric(), stringsAsFactors = FALSE)
# Loop through each station name
for (i in 1:nlevels(data$station_name)) {
# Filter the original data for the current station
station_data <- data %>% filter(station_name == levels(data$station_name)[i])
# Extract the 5-year return level for the current station
return_5yr <- return_levels_with_coords_block %>% filter(station_name == levels(data$station_name)[i]) %>% pull(return_5yr)
# Count the number of exceedances for the current station
exceedances <- sum(station_data$surge_daily_max > return_5yr)
# Add station name and exceedance count to the dataframe
exceedance_counts <- rbind(exceedance_counts,
data.frame(station_name = station_data$station_name %>% unique,
exceedances_5yr = exceedances,
exceedance_level_5yr = return_5yr))
}
# Print the dataframe
print(exceedance_counts)
# Plot the time series of exceedances over the years
ggplot(exceedance_counts, aes(x = year, y = exceedances_5yr)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Exceedances Above 5-Year Return Level Per Year (Station 749)",
x = "Year", y = "Exceedances")
exceedance_counts
exceedance_counts
i <_ 16
i <- 16
# Create an empty dataframe to store results
exceedance_counts <- data.frame(station_name = character(), exceedances_5yr = numeric(), stringsAsFactors = FALSE)
# Filter the original data for the current station
station_data <- data %>% filter(station_name == levels(data$station_name)[i])
station_data
station_data
# Extract the 5-year return level for the current station
return_5yr <- return_levels_with_coords_block %>% filter(station_name == levels(data$station_name)[i]) %>% pull(return_5yr)
return_5yr
return_levels_with_coords_block
return_levels_with_coords_block
inner_join(data, return_levels_with_coords_block, by = "station_name")
check <-inner_join(data, return_levels_with_coords_block, by = "station_name")
check
check
return_levels_with_coords_block
return_levels_with_coords_block
check <-inner_join(data %>% select(station_name, year, month, day, surge_daily_max), return_levels_with_coords_block, by = "station_name")
check
check
exceedance_dat <-inner_join(data %>% select(station_name, year, month, day, surge_daily_max), return_levels_with_coords_block, by = "station_name")
exceedance_20yr = (surge_daily_max > return_20yr)
exceedance_dat <-inner_join(data %>% select(station_name, year, month, day, surge_daily_max), return_levels_with_coords_block, by = "station_name")
exceedance_dat %>% group_by(station_name, year) %>% summarise(exceedance_5yr = sum(surge_daily_max > return_5yr),
exceedance_20yr = (surge_daily_max > return_20yr))
check <- exceedance_dat %>% group_by(station_name, year) %>% summarise(exceedance_5yr = sum(surge_daily_max > return_5yr),
exceedance_20yr = (surge_daily_max > return_20yr))
check
check
check <- exceedance_dat %>% group_by(station_name, year) %>% dplyr::summarise(exceedance_5yr = sum(surge_daily_max > return_5yr),
exceedance_20yr = (surge_daily_max > return_20yr))
check
check
check <- exceedance_dat %>% group_by(station_name, year) %>% summarise(exceedance_5yr = sum(surge_daily_max > return_5yr),
exceedance_20yr = sum(surge_daily_max > return_20yr))
check
check
annual_exceedance_counts  <- exceedance_dat %>% group_by(station_name, year) %>% summarise(exceedance_5yr = sum(surge_daily_max > return_5yr),
exceedance_20yr = sum(surge_daily_max > return_20yr))
annual_exceedance_counts  <- exceedance_dat %>% group_by(station_name, year) %>% summarise(exceedance_5yr = sum(surge_daily_max > return_5yr),
exceedance_20yr = sum(surge_daily_max > return_20yr)) %>% ungroup()
annual_exceedance_counts
annual_exceedance_counts <- exceedance_dat %>%
group_by(station_name, year) %>%
summarise(exceedance_5yr = sum(surge_daily_max > return_5yr),
exceedance_20yr = sum(surge_daily_max > return_20yr)) %>%
ungroup()
exceedance_dat <-inner_join(data %>% select(station_name, year, month, day, surge_daily_max), return_levels_with_coords_block, by = "station_name")
annual_exceedance_counts <- exceedance_dat %>%
group_by(station_name, year) %>%
summarise(exceedance_5yr = sum(surge_daily_max > return_5yr),
exceedance_20yr = sum(surge_daily_max > return_20yr)) %>%
ungroup()
annual_exceedance_counts %>% filter(station == "795")
annual_exceedance_counts
annual_exceedance_counts
ggplot(annual_exceedance_counts %>% filter(station_name == "795"), aes(x = year, y = exceedance_5yr)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Exceedances Above 5-Year Return Level Per Year",
x = "Year", y = "Exceedances")
library(sf)
library(ggplot2)
library(dplyr)
library(tmap)
library(tidyr)
data <- readRDS("gtsr_daily_max_1979_2014.rds")
dun_laoghaire <- data %>% filter(station_name == "795") #795 dun laoghaire
# Define custom ordering of months from July to June
custom_order <- c("Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "Jan", "Feb", "Mar", "Apr", "May", "Jun")
# Convert month integer to corresponding month abbreviation
dun_laoghaire$month <- factor(month.abb[dun_laoghaire$month], levels = custom_order)
data <- readRDS("gtsr_daily_max_1979_2014.rds")
dun_laoghaire <- data %>% filter(station_name == "795") #795 dun laoghaire
# Define custom ordering of months from July to June
custom_order <- c("Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "Jan", "Feb", "Mar", "Apr", "May", "Jun")
# Convert month integer to corresponding month abbreviation
dun_laoghaire$month <- factor(month.abb[dun_laoghaire$month], levels = custom_order)
# Time series plot
ggplot(dun_laoghaire, aes(x = as.Date(date_time), y = surge_daily_max)) +
geom_line() +
labs(title = "Sea Level Surge Daily Maximum Values Over Time",
x = "Date", y = "Surge Daily Max")
dun_laoghaire <- data %>% filter(station_name == "795") #795 dun laoghaire
# Define custom ordering of months from July to June
custom_order <- c("Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "Jan", "Feb", "Mar", "Apr", "May", "Jun")
# Convert month integer to corresponding month abbreviation
dun_laoghaire$month <- factor(month.abb[dun_laoghaire$month], levels = custom_order)
# Time series plot
ggplot(dun_laoghaire, aes(x = as.Date(date_time), y = surge_daily_max)) +
geom_line() +
labs(title = "Sea Level Surge Daily Maximum Values Over Time",
x = "Date", y = "Surge Daily Max")
library(extRemes)
dun_laoghaire_annual_max <- dun_laoghaire %>% group_by(year) %>% summarise(annual_max = max(surge_daily_max))
# Fit GEV distribution to block maxima
gev_block_fit <- fevd(dun_laoghaire_annual_max$annual_max, method = "MLE")
print("Block Maxima Method (GEV/GP):")
print(summary(gev_block_fit))
plot(gev_block_fit) ## plot block max fit (looks better, fits inside
return.level(gev_block_fit, return.period = c(5,20, 100), do.ci = TRUE)
# Define function to estimate return levels for a given station
estimate_return_levels_block<- function(station_data_block) {
# Fit GEV distribution to block maxima
gev_block_fit <- fevd(station_data_block$surge_annual_max, method = "MLE") ### UPDATE NC, APR 16
# Estimate return levels
return_levels_block <- return.level(gev_block_fit, return.period = c(5,20, 100), do.ci = TRUE)
# Return the return levels
return(return_levels_block)
}
# Create an empty dataframe to store return level estimates for all stations
return_levels_all_block <- data.frame(station_name = character(),
return_5yr = numeric(),
return_20yr = numeric(),
return_100yr = numeric(),
stringsAsFactors = FALSE)
# Loop through each station in the subset (i = 16 for DunL)
for (i in 1:nlevels(data$station_name)) {
# Subset data for the current station
station_data_block <- data %>% filter(station_name == levels(data$station_name)[i]) %>% group_by(station_name, year) %>% summarise(surge_annual_max = max(surge_daily_max)) %>% ungroup() ### UPDATE NC, APR 16
# Estimate return levels for the current station
return_levels_block <- estimate_return_levels_block(station_data_block)
# Add return levels to the dataframe
return_levels_all_block <- rbind(return_levels_all_block,
data.frame(station_name = station_data_block$station_name %>% unique(),
return_5yr = return_levels_block[1],
return_20yr = return_levels_block[2],
return_100yr = return_levels_block[3]))
}
# Print the dataframe
print(return_levels_all_block)
# Print the dataframe
print(return_levels_all_block %>% filter(station_name == "795")) # check DL
# Define function to estimate return levels for a given station
estimate_return_levels_block<- function(station_data_block) {
# Fit GEV distribution to block maxima
gev_block_fit <- fevd(station_data_block$surge_annual_max, method = "MLE") ### UPDATE NC, APR 16
# Estimate return levels
return_levels_block <- return.level(gev_block_fit, return.period = c(5,20, 100), do.ci = TRUE)
# Return the return levels
return(return_levels_block)
}
# Create an empty dataframe to store return level estimates for all stations
return_levels_all_block <- data.frame(station_name = character(),
return_5yr = numeric(),
return_20yr = numeric(),
return_100yr = numeric(),
stringsAsFactors = FALSE)
# Loop through each station in the subset (i = 16 for DunL)
for (i in 1:nlevels(data$station_name)) {
# Subset data for the current station
station_data_block <- data %>% filter(station_name == levels(data$station_name)[i]) %>% group_by(station_name, year) %>% summarise(surge_annual_max = max(surge_daily_max)) %>% ungroup() ### UPDATE NC, APR 16
# Estimate return levels for the current station
return_levels_block <- estimate_return_levels_block(station_data_block)
# Add return levels to the dataframe
return_levels_all_block <- rbind(return_levels_all_block,
data.frame(station_name = station_data_block$station_name %>% unique(),
return_5yr = return_levels_block[1],
return_20yr = return_levels_block[2],
return_100yr = return_levels_block[3]))
}
# Print the dataframe
print(return_levels_all_block %>% filter(station_name == "795")) # check DL :)
data_unique <- distinct(data, station_name, lon, lat)
## switched to use inner join to join the datasets
return_levels_with_coords_block <- inner_join(return_levels_all_block, data_unique, by = "station_name")
# Convert return_levels_all_with_coords to sf object
return_levels_sf_block <- st_as_sf(return_levels_with_coords_block, coords = c("lon", "lat"), crs = 4326)
# Plot map of Ireland with return levels represented by colors
tm_shape(ireland) +
tm_borders() +
tm_shape(return_levels_sf_block) +
tm_dots(col = "return_5yr", size = 1, alpha = 0.5, title = "Return Level (5yr) Using Block Maxima") +
tm_style("gray")
#Load spatial data
ireland <- st_read("IRL_adm0.shp")
data_unique <- distinct(data, station_name, lon, lat)
## switched to use inner join to join the datasets
return_levels_with_coords_block <- inner_join(return_levels_all_block, data_unique, by = "station_name")
# Convert return_levels_all_with_coords to sf object
return_levels_sf_block <- st_as_sf(return_levels_with_coords_block, coords = c("lon", "lat"), crs = 4326)
# Plot map of Ireland with return levels represented by colors
tm_shape(ireland) +
tm_borders() +
tm_shape(return_levels_sf_block) +
tm_dots(col = "return_5yr", size = 1, alpha = 0.5, title = "Return Level (5yr) Using Block Maxima") +
tm_style("gray")
# Plot map of Ireland with return levels represented by colors
tm_shape(ireland) +
tm_borders() +
tm_shape(return_levels_sf_block) +
tm_dots(col = "return_20yr", size = 1, alpha = 0.5, title = "Return Level (20yr) Using Block Maxima") +
tm_style("gray")
# Plot map of Ireland with return levels represented by colors
tm_shape(ireland) +
tm_borders() +
tm_shape(return_levels_sf_block) +
tm_dots(col = "return_100yr", size = 0.5, alpha = 0.5, title = "Return Level (100yr) Using Block Maxima") +
tm_style("gray")
exceedance_dat <-inner_join(data %>% select(station_name, year, month, day, surge_daily_max), return_levels_with_coords_block, by = "station_name")
annual_exceedance_counts <- exceedance_dat %>%
group_by(station_name, year) %>%
summarise(exceedance_5yr = sum(surge_daily_max > return_5yr),
exceedance_20yr = sum(surge_daily_max > return_20yr)) %>%
ungroup()
ggplot(annual_exceedance_counts %>% filter(station_name == "795"), aes(x = year, y = exceedance_5yr)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Exceedances Above 5-Year Return Level Per Year",
x = "Year", y = "Exceedances")
## plot for DL
ggplot(annual_exceedance_counts %>% filter(station_name == "795"), aes(x = year, y = exceedance_5yr)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Exceedances Above 5-Year Return Level Per Year",
x = "Year", y = "Exceedances")
ggplot(annual_exceedance_counts %>% filter(station_name == "795"), aes(x = year, y = exceedance_5yr)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Exceedances Above 5-Year Return Level Per Year",
x = "Year", y = "Exceedances")
